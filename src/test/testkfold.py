import matplotlib
import numpy as np
from keras.applications.nasnet import NASNetMobile
from tensorflow.python.keras.models import load_model

import utils
from data import DataLoader
from option import args

# 忽略硬件加速的警告信息

model_nas = 'C:\\Users\mlx\PycharmProjects\角膜\Model\model3_nas\\NASNet_best_weights.h5'
model_Res = 'D:\Projects\jiaomo-master\Model\model5_resNet\ResNet_best_weights.h5'
mode_fold_res_5 = 'D:\Projects\PycharmProjects\角膜\Model\model5_resNet5fold\ResNet_best_weights_fold_3.h5'
model_inception = 'D:\Projects\PycharmProjects\角膜\Model\model4_inceptionv3\inception_v3_best_weights.h5'
data_loader = DataLoader(args)
x, x_label, x_file = data_loader.get_test()
x = utils.dataset_normalized(x)
matplotlib.use('Agg')
# base_model = NASNetMobile(weights=None, include_top=False)
# model = add_new_last_layer(base_model, 2)
# # model.compile(optimizer=Adam(lr=0.0001, beta_1=0.1),
# #                            loss='categorical_crossentropy', metrics=['categorical_accuracy'])
# model.load_weights(model_nas)

###################################################
# model = load_model('D:\Projects\jiaomo-3classier\model\model_inception_v3_02_1_5fold\Inception_v3_best_weights_fold_0.h5')
# y1 = model.predict(x)
# print(y1)
# model.load_weights('D:\Projects\jiaomo-3classier\model\model_inception_v3_02_1_5fold\Inception_v3_best_weights_fold_1.h5')
# y2 = model.predict(x)
# print(y2)
# model.load_weights('D:\Projects\jiaomo-3classier\model\model_inception_v3_02_1_5fold\Inception_v3_best_weights_fold_2.h5')
# y3 = model.predict(x)
# print(y3)
# model.load_weights('D:\Projects\jiaomo-3classier\model\model_inception_v3_02_1_5fold\Inception_v3_best_weights_fold_3.h5')
# y4 = model.predict(x)
# print(y4)
# model.load_weights('D:\Projects\jiaomo-3classier\model\model_inception_v3_02_1_5fold\Inception_v3_best_weights_fold_4.h5')
# y5 = model.predict(x)
# print(y5)
# i = 0
#
# y = (y1 + y2 + y3 + y4 + y5) / 5

y = [[9.67133403e-01, 3.28665674e-02]
    , [9.99986172e-01, 1.38755622e-05]
    , [8.00456703e-02, 9.19954300e-01]
    , [9.99998569e-01, 1.41293492e-06]
    , [9.99715626e-01, 2.84349808e-04]
    , [1.00000000e+00, 7.67841524e-09]
    , [6.09025230e-09, 1.00000000e+00]
    , [1.49642972e-06, 9.99998450e-01]
    , [1.55078905e-09, 1.00000000e+00]
    , [6.85642287e-02, 9.31435704e-01]
    , [6.52312100e-01, 3.47687930e-01]
    , [1.00000000e+00, 9.19431375e-09]
    , [9.99996066e-01, 3.90800187e-06]
    , [3.47854465e-01, 6.52145505e-01]
    , [8.08860525e-04, 9.99191105e-01]
    , [9.99995589e-01, 4.41176553e-06]
    , [9.99987602e-01, 1.23561067e-05]
    , [9.99989629e-01, 1.03457551e-05]
    , [6.46002150e-07, 9.99999404e-01]
    , [8.56729627e-01, 1.43270418e-01]
    , [2.73577143e-07, 9.99999821e-01]
    , [9.99990940e-01, 9.06977766e-06]
    , [8.99515033e-01, 1.00484908e-01]
    , [9.99544501e-01, 4.55421337e-04]
    , [9.97112095e-01, 2.88788718e-03]
    , [9.99999821e-01, 2.88627575e-07]
    , [3.39075405e-06, 9.99996662e-01]
    , [9.99980569e-01, 1.94724234e-05]
    , [9.99750435e-01, 2.49565433e-04]
    , [2.80431216e-08, 1.00000000e+00]
    , [9.96734440e-01, 3.26565607e-03]
    , [3.07206040e-12, 1.00000000e+00]
    , [9.99995589e-01, 4.42271403e-06]
    , [9.02737796e-01, 9.72621590e-02]
    , [1.02684580e-05, 9.99989688e-01]
    , [9.99999881e-01, 1.66464716e-07]
    , [3.69241595e-01, 6.30758405e-01]
    , [4.33272216e-05, 9.99956727e-01]
    , [9.36568260e-01, 6.34317547e-02]
    , [9.99971867e-01, 2.81311914e-05]
    , [9.96131897e-01, 3.86813423e-03]
    , [9.35226753e-02, 9.06477273e-01]
    , [3.31320721e-10, 1.00000000e+00]
    , [9.99999642e-01, 3.70627731e-07]
    , [9.99992013e-01, 7.95645519e-06]
    , [9.99985576e-01, 1.44588721e-05]
    , [9.99907136e-01, 9.28693044e-05]
    , [3.03039155e-06, 9.99997020e-01]
    , [9.45915580e-01, 5.40843792e-02]
    , [9.99998093e-01, 1.91502272e-06]
    , [1.00000000e+00, 1.32179849e-08]
    , [9.99999881e-01, 1.63107273e-07]
    , [9.99985516e-01, 1.45430340e-05]
    , [1.78787013e-06, 9.99998212e-01]
    , [1.00000000e+00, 2.89096769e-09]
    , [8.23199855e-07, 9.99999166e-01]
    , [1.00000000e+00, 2.57932586e-09]
    , [9.99997616e-01, 2.39552901e-06]
    , [1.00000000e+00, 4.27555680e-09]
    , [9.99999881e-01, 1.30798654e-07]
    , [9.99996662e-01, 3.29844852e-06]
    , [9.99978840e-01, 2.11972547e-05]
    , [1.12005183e-03, 9.98880029e-01]
    , [3.87014094e-04, 9.99612987e-01]
    , [9.99997139e-01, 2.87539865e-06]
    , [9.94894207e-01, 5.10578789e-03]
    , [1.00000000e+00, 5.89531313e-09]
    , [9.99966025e-01, 3.40185543e-05]
    , [4.50687231e-12, 1.00000000e+00]
    , [1.50809001e-06, 9.99998450e-01]
    , [1.76773982e-12, 1.00000000e+00]
    , [2.08635069e-02, 9.79136467e-01]
    , [9.99994874e-01, 5.07560799e-06]
    , [5.41224509e-14, 1.00000000e+00]
    , [9.99957860e-01, 4.22223202e-05]
    , [1.05360614e-05, 9.99989510e-01]
    , [9.99999821e-01, 2.22273087e-07]
    , [9.30849671e-01, 6.91502690e-02]
    , [9.99999821e-01, 2.05579198e-07]
    , [9.99784350e-01, 2.15598848e-04]
    , [9.99983788e-01, 1.62411143e-05]
    , [5.48512954e-03, 9.94514942e-01]
    , [6.26081373e-08, 9.99999881e-01]
    , [1.22925081e-09, 1.00000000e+00]
    , [9.99983788e-01, 1.62414253e-05]
    , [3.22678573e-02, 9.67732131e-01]
    , [9.99993443e-01, 6.54118548e-06]
    , [1.13576343e-02, 9.88642395e-01]
    , [9.99997616e-01, 2.33320452e-06]
    , [2.37895511e-02, 9.76210475e-01]
    , [9.99996543e-01, 3.49316406e-06]
    , [9.99998569e-01, 1.38054804e-06]
    , [1.12141549e-07, 9.99999881e-01]
    , [7.25655369e-11, 1.00000000e+00]
    , [1.40600960e-07, 9.99999881e-01]
    , [3.16297961e-03, 9.96837020e-01]
    , [9.99980927e-01, 1.91068757e-05]
    , [9.99994397e-01, 5.57690237e-06]
    , [9.99958217e-01, 4.17476331e-05]
    , [9.99997735e-01, 2.26034558e-06]
    , [9.27168578e-02, 9.07283187e-01]
    , [2.48683733e-04, 9.99751270e-01]
    , [9.99999523e-01, 4.50402837e-07]
    , [9.99996960e-01, 3.04188052e-06]
    , [8.74747753e-01, 1.25252277e-01]
    , [9.99988377e-01, 1.17338423e-05]
    , [9.99991536e-01, 8.42480040e-06]
    , [1.67654813e-04, 9.99832273e-01]
    , [8.74220518e-09, 1.00000000e+00]
    , [1.29236666e-08, 1.00000000e+00]
    , [1.71024150e-11, 1.00000000e+00]
    , [8.03157775e-07, 9.99999166e-01]
    , [9.99998093e-01, 1.86138254e-06]
    , [1.74334106e-11, 1.00000000e+00]
    , [1.45671175e-09, 1.00000000e+00]
    , [2.66359795e-10, 1.00000000e+00]
    , [9.99999881e-01, 1.58336888e-07]
    , [9.99999225e-01, 6.57202236e-07]
    , [9.99931455e-01, 6.85425039e-05]
    , [7.96108335e-09, 1.00000000e+00]
    , [9.99894738e-01, 1.05194966e-04]
    , [9.99996960e-01, 3.06818333e-06]
    , [9.99832749e-01, 1.67269362e-04]
    , [9.82388616e-01, 1.76113993e-02]
    , [9.99851584e-01, 1.48439081e-04]
    , [9.99991775e-01, 8.21389676e-06]
    , [9.99949098e-01, 5.09065758e-05]
    , [2.03651097e-02, 9.79634941e-01]
    , [2.33994216e-01, 7.66005754e-01]
    , [9.80705559e-01, 1.92944296e-02]
    , [9.99998927e-01, 1.12147904e-06]
    , [1.55871138e-01, 8.44128788e-01]
    , [9.99986529e-01, 1.34446582e-05]
    , [9.99987483e-01, 1.25262204e-05]
    , [1.97712370e-06, 9.99997973e-01]
    , [4.12437972e-03, 9.95875657e-01]
    , [9.99998093e-01, 1.92992457e-06]
    , [9.99216676e-01, 7.83345487e-04]
    , [2.03157333e-06, 9.99997973e-01]
    , [9.99984384e-01, 1.56595652e-05]
    , [9.99998212e-01, 1.80476820e-06]
    , [9.99997735e-01, 2.31620265e-06]
    , [9.99989152e-01, 1.08396280e-05]
    , [9.99999523e-01, 4.64779021e-07]
    , [9.99877930e-01, 1.22093305e-04]
    , [9.99991536e-01, 8.47901356e-06]
    , [1.00000000e+00, 1.08995346e-09]
    , [9.99999166e-01, 7.85096006e-07]
    , [7.94636890e-07, 9.99999166e-01]
    , [4.15627100e-02, 9.58437264e-01]
    , [9.95667279e-01, 4.33277898e-03]
    , [9.99999881e-01, 1.05502480e-07]
    , [7.20567167e-01, 2.79432803e-01]
    , [3.92041011e-06, 9.99996066e-01]
    , [9.99999881e-01, 1.55726397e-07]
    , [7.80970464e-03, 9.92190242e-01]
    , [6.51379324e-08, 9.99999881e-01]
    , [9.99966621e-01, 3.33312164e-05]
    , [2.31972997e-13, 1.00000000e+00]
    , [3.77345495e-02, 9.62265491e-01]
    , [1.61017866e-11, 1.00000000e+00]
    , [9.99996006e-01, 4.08604728e-06]
    , [9.99978542e-01, 2.14236479e-05]
    , [9.05900300e-01, 9.40996408e-02]
    , [2.59684647e-08, 1.00000000e+00]
    , [9.99835014e-01, 1.64915662e-04]
    , [1.71299443e-01, 8.28700662e-01]
    , [2.07620339e-08, 1.00000000e+00]
    , [9.95525658e-01, 4.47426783e-03]
    , [9.99983430e-01, 1.65988477e-05]
    , [8.94808109e-05, 9.99910474e-01]
    , [9.01881099e-01, 9.81188938e-02]
    , [9.99998093e-01, 1.90819537e-06]
    , [9.99951541e-01, 4.83930162e-05]
    , [9.99996662e-01, 3.29773093e-06]
    , [4.24451412e-11, 1.00000000e+00]
    , [9.99949634e-01, 5.02787989e-05]
    , [9.99999046e-01, 9.79184279e-07]
    , [5.21168634e-02, 9.47883010e-01]
    , [4.03418055e-09, 1.00000000e+00]
    , [9.27487687e-09, 1.00000000e+00]
    , [9.99998868e-01, 1.22740028e-06]
    , [2.69175172e-01, 7.30824888e-01]
    , [9.99960780e-01, 3.92721195e-05]
    , [9.99999821e-01, 2.79986068e-07]
    , [9.45992112e-01, 5.40079996e-02]
    , [5.46200283e-07, 9.99999404e-01]
    , [9.99997973e-01, 2.00459272e-06]
    , [1.22647872e-02, 9.87735152e-01]
    , [2.12483769e-07, 9.99999821e-01]
    , [9.99999881e-01, 1.31164029e-07]
    , [9.99987006e-01, 1.29518858e-05]
    , [9.99982834e-01, 1.71267857e-05]
    , [5.59639093e-03, 9.94403660e-01]
    , [1.37466031e-05, 9.99986291e-01]
    , [9.99983668e-01, 1.63747700e-05]
    , [1.00000000e+00, 4.37668426e-08]
    , [1.68779017e-08, 1.00000000e+00]
    , [9.99648571e-01, 3.51388357e-04]
    , [3.60626400e-01, 6.39373541e-01]
    , [9.73303199e-01, 2.66967155e-02]
    , [1.24786348e-09, 1.00000000e+00]
    , [9.25064114e-08, 9.99999881e-01]
    , [3.08040902e-03, 9.96919632e-01]
    , [9.99998271e-01, 1.62555966e-06]
    , [1.48210693e-02, 9.85178828e-01]
    , [1.13585386e-02, 9.88641441e-01]
    , [9.98353481e-01, 1.64650637e-03]
    , [3.72143835e-02, 9.62785602e-01]
    , [9.72692668e-01, 2.73072962e-02]
    , [9.99991894e-01, 8.07570996e-06]
    , [9.99926746e-01, 7.32336775e-05]
    , [9.99997497e-01, 2.47627077e-06]
    , [9.99991536e-01, 8.45867635e-06]]
# y = np.zeros((len(y1), 2), dtype=np.int)

# for (x1, x2, x3, x4, x5) in zip(y1, y2, y3, y4, y5):
#     y[i][0] = (x1[0] + x2[0] + x3[0] + x4[0] + x5[0]) / 5
#     y[i][1] = (x1[1] + x2[1] + x3[1] + x4[1] + x5[1]) / 5
#     print((x1[1] + x2[1] + x3[1] + x4[1] + x5[1]) / 5)
#     print()
#     print(y[i][0])
#     print(y[i][1])
#
#     i = i + 1
#
print(y)


def predict(y, num):
    errorfile = []
    goodnum = 0
    total = 0
    total_good = 0
    badnum = 0
    total_bad = 0
    i = 0
    for xx in y:
        if x_label[i] == 1:
            total_good += 1
            if xx[1] > num:
                goodnum += 1
            else:
                errorfile.append(x_file[i])
        if x_label[i] == 0:
            total_bad += 1
            if xx[0] >= 1 - num:
                badnum += 1
            else:
                errorfile.append(x_file[i])
        i += 1
        total += 1
    TP = badnum
    TN = goodnum
    FN = total_bad - badnum
    FP = total_good - goodnum
    Sen = TP / (TP + FN)
    spe = TN / (TN + FP)
    bacc = (Sen + spe) / 2
    ACC = (TP + TN) / (TP + TN + FP + FN)
    print('num={} Sensitivity={} Specificity={} Balanced Accuracy={} Accuracy={}'.format(num, Sen, spe, bacc, ACC))
    return Sen, spe, bacc, ACC, np.asarray(errorfile)


tt = 0
sen = []
spe = []
bacc = []
ACC = []
errf = []
for i in range(0, 101):
    a, b, c, d, e = predict(y, tt)
    tt += 0.01
    sen.append(a)
    spe.append(b)
    bacc.append(c)
    ACC.append(d)
    errf.append(e)

print(sen)
print(spe)
print(bacc)
print(ACC)
spe_1 = [1 - i for i in spe]
auc = 0
tt = 0
for i in range(0, len(spe_1) - 1):
    auc += (spe_1[i + 1] - spe_1[i]) * (sen[i] + sen[i + 1]) / 2

print('AUC={}'.format(auc))

index = ACC.index(max(ACC))
print('specificity={}'.format(spe[index]))
print('sensitivity={}'.format(sen[index]))
print('Best B-Accuracy={}'.format(bacc[index]))
print('Best Acc={}'.format(ACC[index]))
np.savetxt(args.save + 'errorfile', errf[index], fmt='%s', encoding='utf-8')

print(errf[index])
